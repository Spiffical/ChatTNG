FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libcap2-bin \
    procps \
    libpq-dev \
    gcc \
    python3-dev \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Debug: Print working directory and list contents
RUN pwd && echo "Contents of current directory:" && ls -la

# Copy the entire backend directory first to ensure all files are available
COPY backend/ /app/backend/

# Debug: Print contents to verify copy
RUN echo "Verifying backend contents:" && \
    ls -la /app/backend/ && \
    echo "Verifying config contents:" && \
    ls -la /app/backend/config/

# Copy and install requirements
COPY backend/requirements.txt /app/
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir wheel setuptools && \
    pip install --no-cache-dir asyncpg psycopg && \
    pip install --no-cache-dir -r requirements.txt

# Download NLTK data
RUN python -m nltk.downloader punkt averaged_perceptron_tagger

# Set environment variables
ENV PYTHONPATH=/app/backend
ENV PORT=8080
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Create non-root user for security and set permissions
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /root/nltk_data && \
    cp -r /root/nltk_data /app/ && \
    chown -R appuser:appuser /app/nltk_data && \
    # Create log directory with proper permissions
    mkdir -p /app/logs && \
    chown -R appuser:appuser /app/logs && \
    chmod -R 755 /app/logs

# Set NLTK_DATA environment variable
ENV NLTK_DATA=/app/nltk_data

# Set working directory to backend
WORKDIR /app/backend

# Debug: Print final state and verify imports
RUN echo "Final directory structure:" && \
    echo "Current directory:" && pwd && \
    echo "Backend contents:" && ls -la && \
    echo "Config contents:" && ls -la config/ && \
    echo "Python path:" && python -c "import sys; print(sys.path)" && \
    echo "Testing database imports..." && \
    python -c "import asyncpg; import psycopg; print('Database imports successful')" && \
    echo "Trying to import settings..." && \
    python -c "from config.settings import get_settings; print('Successfully imported settings')" && \
    # Add capability to bind to privileged ports
    setcap 'cap_net_bind_service=+ep' /usr/local/bin/python3.11

# Create a wrapper script for startup
COPY <<EOF /app/backend/start.sh
#!/bin/bash
echo "Starting application..."
echo "Current user: $(id)"
echo "Current directory: $(pwd)"
echo "Directory contents:"
ls -la
echo "Python version: $(python --version)"
echo "Available memory:"
free -h
echo "Running processes:"
ps aux
exec python -m uvicorn main:app --host 0.0.0.0 --port 8080 --workers 2
EOF

# Set permissions on start script before switching user
RUN chmod +x /app/backend/start.sh && \
    chown appuser:appuser /app/backend/start.sh

# Expose port
EXPOSE 8080

# Switch to non-root user
USER appuser

# Start command using the wrapper script
CMD ["/app/backend/start.sh"] 